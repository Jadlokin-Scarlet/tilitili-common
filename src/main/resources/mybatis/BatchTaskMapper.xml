<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tilitili.common.mapper.BatchTaskMapper">
	<resultMap id="BatchTaskResultMap" type="com.tilitili.common.entity.BatchTask">
		<result column="create_time" property="createTime" />
		<result column="update_time" property="updateTime" />
		<result column="total_task_number" property="totalTaskNumber" />
		<result column="wait_task_number" property="waitTaskNumber" />
		<result column="success_task_number" property="successTaskNumber" />
		<result column="fail_task_number" property="failTaskNumber" />
	</resultMap>
	<select id="count" resultType="Integer">
		select count(1) from batch_task
		<where>
			<if test="id != null">
				and batch_task.id = #{id}
			</if>
			<if test="status != null">
				and batch_task.status = #{status}
			</if>
			<if test="type != null">
				and batch_task.type = #{type}
			</if>
			<if test="reason != null">
				and task.reason = #{reason}
			</if>
		</where>
	</select>
	<select id="list" resultMap="BatchTaskResultMap">
		select * from batch_task
		<where>
			<if test="id != null">
				and batch_task.id = #{id}
			</if>
			<if test="status != null">
				and batch_task.status = #{status}
			</if>
			<if test="type != null">
				and batch_task.type = #{type}
			</if>
			<if test="reason != null">
				and task.reason = #{reason}
			</if>
		</where>
		<if test="sorter != null and sorted != null">
			order by [${sorter}] ${sorted}
		</if>
		<if test="sorter == null or sorted == null">
			order by id desc
		</if>
		<if test="start != null and pageSize != null">
			offset ${start} rows fetch next ${pageSize} rows only
		</if>
	</select>
<!--	<select id="listWithJoin" resultMap="BatchTaskResultMap">-->
<!--		select batch_task.*,-->
<!--			count(task.id) as total_task_number,-->
<!--		    count(wait_task.id) as wait_task_number,-->
<!--			count(success_task.id) as success_task_number,-->
<!--			count(fail_task.id) as fail_task_number-->
<!--		from batch_task-->
<!--		    left join task on batch_task.id = task.batch_id-->
<!--			left join task as wait_task on batch_task.id = wait_task.batch_id and wait_task.status = 0-->
<!--			left join task as success_task on batch_task.id = success_task.batch_id and success_task.status = 2-->
<!--			left join task as fail_task on batch_task.id = fail_task.batch_id and fail_task.status in (3, 4)-->
<!--		<where>-->
<!--			<if test="id != null">-->
<!--				and batch_task.id = #{id}-->
<!--			</if>-->
<!--			<if test="status != null">-->
<!--				and batch_task.status = #{status}-->
<!--			</if>-->
<!--			<if test="type != null">-->
<!--				and batch_task.type = #{type}-->
<!--			</if>-->
<!--			<if test="reason != null">-->
<!--				and task.reason = #{reason}-->
<!--			</if>-->
<!--		</where>-->
<!--		group by batch_task.id, batch_task.type, batch_task.status, batch_task.create_time, batch_task.update_time, batch_task.remark, batch_task.reason-->
<!--		<if test="sorter != null and sorted != null">-->
<!--			order by [${sorter}] ${sorted}-->
<!--		</if>-->
<!--		<if test="sorter == null or sorted == null">-->
<!--			order by batch_task.id desc-->
<!--		</if>-->
<!--		<if test="start != null and pageSize != null">-->
<!--			offset ${start} rows fetch next ${pageSize} rows only-->
<!--		</if>-->
<!--	</select>-->
	<insert id="insert" keyProperty="id" parameterType="com.tilitili.common.entity.BatchTask" useGeneratedKeys="true">
		insert into batch_task (
			<trim suffixOverrides=",">
				create_time,
				update_time,
				<if test="status != null">status,</if>
				<if test="type != null">type,</if>
				<if test="reason != null">reason,</if>
			</trim>
		) values (
			<trim suffixOverrides=",">
				getdate(),
				getdate(),
				<if test="status != null">#{status},</if>
				<if test="type != null">#{type},</if>
				<if test="reason != null">#{reason},</if>
			</trim>
		)
	</insert>
	<update id="update">
		update batch_task
		<set>
			update_time = getdate(),
			<if test="status != null">status = #{status},</if>
			<if test="remark != null">remark = #{remark},</if>
			<if test="reason != null">reason = #{reason},</if>
		</set>
		where id = #{id}
	</update>
</mapper>